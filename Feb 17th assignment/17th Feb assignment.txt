Q1. What is MongoDB? Explain non-relational databases in short. In which scenarios it is preferred to use
MongoDB over SQL databases?

	Most databases can be categorized as either relational or non-relational. Non-relational databases are sometimes referred to as “NoSQL,” which stands for Not Only SQL. The main difference between these is how they store their information.

A non-relational database stores data in a non-tabular form, and tends to be more flexible than the traditional, SQL-based, relational database structures. It does not follow the relational model provided by traditional relational database management systems.

Q2. State and Explain the features of MongoDB.

	MongoDB is a document-oriented NoSQL database platform which provides numerous important features. Among them are:

The document model with a flexible schema to best store data for your application needs.
Replication for better data availability and stability.
Sharding for horizontal scalability.
Ad-hoc queries for optimized, real-time analytics.

Q3. Write a code to connect MongoDB to Python. Also, create a database and a collection in MongoDB.

client = pymongo.MongoClient("mongodb+srv://gobianan:gobianan@cluster0.dzwhgbn.mongodb.net/?retryWrites=true&w=majority")
db = client.test
db=client["gobi_test1"]
col_gobi=db["gobi"]


Q4. Using the database and the collection created in question number 3, write a code to insert one record,
and insert many records. Use the find() and find_one() methods to print the inserted record.

data1={"Name":"gobianan",
       "college":"sns college of technology",
       "dept":"Information technology"
}
data12=[{"Name":"gobianan",
       "college":"sns college of technology",
       "dept":"Information technology"
},{"Name":"suriya",
       "college":"sns college of technology",
       "dept":"Information technology"
},{"Name":"parasuraman",
       "college":"sns college of technology",
       "dept":"Information technology"
},{"Name":"aadish",
       "college":"sns college of technology",
       "dept":"Information technology"
},{"Name":"gayathri",
       "college":"sns college of technology",
       "dept":"Information technology"
}]
col_gobi.insert_one(data1)
col_gobi.insert_many(data12)
for i in col_gobi.find({'Name':"gobianan"}):
    print(i)
for i in col_gobi.find_one({'Name':"gobianan"}):
    print(i)

Q5. Explain how you can use the find() method to query the MongoDB database. Write a simple code to
demonstrate this.

	A cursor to the documents that match the query criteria. When the 
find()
 method "returns documents," the method is actually returning a cursor to the documents.

for i in col_gobi.find({'Name':"gobianan"}):
    print(i)
for i in col_gobi.find_one({'Name':"gobianan"}):
    print(i)


Q6. Explain the sort() method. Give an example to demonstrate sorting in MongoDB.

The sort() method in mongodb is used to sort the data in a particular order based on the user’s requirement. The general syntax for the sort() command follows the below pattern

db.weather.find({"temp": 12}).sort({"_id":1})

Q7. Explain why delete_one(), delete_many(), and drop() is used.

To delete at most a single document that matches a specified filter (even though multiple documents may match the specified filter) use the db.collection.deleteOne() method.

You can specify criteria, or filters, that identify the documents to delete. The filters use the same syntax as read operations.

To specify equality conditions, use <field>:<value> expressions in the query filter document:

Removes a collection or view from the database. The method also removes any indexes associated with the dropped collection. The method provides a wrapper around the drop command.

db.collection.drop()
 has the form: