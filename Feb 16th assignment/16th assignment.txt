Q1. What is a database? Differentiate between SQL and NoSQL databases.

	Database defined A database is an organized collection of structured information, or data, typically stored electronically in a computer system. A database is usually controlled by a database management system (DBMS).

	SQL databases are table-based, while NoSQL databases are non-relational. This means that a SQL database contains structured data and can perform an analysis using a relational model. A NoSQL database contains unstructured data, which means it cannot be analyzed through predefined models.

Q2. What is DDL? Explain why CREATE, DROP, ALTER, and TRUNCATE are used with an example.

	DDL is short name of Data Definition Language, which deals with database schemas and descriptions, of how the data should reside in the database.

	CREATE - to create a database and its objects like (table, index, views, store procedure, function, and triggers)
	ALTER - alters the structure of the existing database
	DROP - delete objects from the database
	TRUNCATE - remove all records from a table, including all spaces allocated for the records are removed

Q3. What is DML? Explain INSERT, UPDATE, and DELETE with an example.

	The DML commands in Structured Query Language change the data present in the SQL database. We can easily access, store, modify, update and delete the existing records from the database using DML commands.
SELECT * FROM table_name; 
INSERT INTO TABLE_NAME ( column_Name1 , column_Name2 , column_Name3 , .... column_NameN )  VALUES (value_1, value_2, value_3, .... value_N ) ;
UPDATE Table_name SET [column_name1= value_1, â€¦.., column_nameN = value_N] WHERE CONDITION
DELETE FROM Table_Name WHERE condition;  

INSERT is your go-to for adding single or multiple rows to a table. INSERT can also help with adding rows from one table into another table.

Let's look at the basic structure of an SQL INSERT statement:

INSERT INTO tableName
(column1, column2, ...)
VALUES (value1, value2, ...)

Q4. What is DQL? Explain SELECT with an example.

	DQL statements are used for performing queries on the data within schema objects. The purpose of the DQL Command is to get some schema relation based on the query passed to it. We can define DQL as follows it is a component of SQL statement that allows getting data from the database and imposing order upon it. It includes the SELECT statement. This command allows getting the data out of the database to perform operations with it. When a SELECT is fired against a table or tables the result is compiled into a further temporary table, which is displayed or perhaps received by the program

Q5. Explain Primary Key and Foreign Key.

	Primary Key: A primary key is used to ensure that data in the specific column is unique. A column cannot have NULL values. It is either an existing table column or a column that is specifically generated by the database according to a defined sequence
	
	Foreign Key: A foreign key is a column or group of columns in a relational database table that provides a link between data in two tables. It is a column (or columns) that references a column (most often the primary key) of another table. 

Q6. Write a python code to connect MySQL to python. Explain the cursor() and execute() method.

	import mysql.connector

mydb = mysql.connector.connect(
  host="localhost",
  user="abc",
  password="password"
)
mycursor = mydb.cursor()
mycursor.execute("create table test.test1(c1 int ,c2 varchar(50), c3 int)")

The first function is used to make the table and it shows my column titles, the second function is needed to update a specific value in the table.

But when this is ran the inputs are executed, however when all show all the products in the table the value for stock level doesn't change.


Q7. Give the order of execution of SQL clauses in an SQL query.

	A query engine understands and execute your query in the following order of clauses:

FROM
JOIN / LEFT JOIN / RIGHT JOIN / FULL OUTER JOIN
ON
WHERE
GROUP BY
HAVING
SELECT
ORDER BY
LIMIT / OFFSET
