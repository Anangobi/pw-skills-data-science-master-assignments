Q1.	A Python program terminates as soon as it encounters an error. In Python, an error can be a syntax error or an exception. In this article, you will see what an exception is and how it differs from a syntax error. After that, you will learn about raising exceptions and making assertions. Then, youâ€™ll finish with a demonstration of the try and except block.
	Syntax errors occur when the parser detects an incorrect statement
	
	We can use raise to throw an exception if a condition occurs. The statement can be complemented with a custom exception.

Q2.	Try and except statements are used to catch and handle exceptions in Python. Statements that can raise exceptions are kept inside the try clause and the statements that handle the exception are written inside except clause.

Example: Let us try to access the array element whose index is out of bound and handle the corresponding exception.
a = [1, 2, 3]
try: 
    print ("Second element = %d" %(a[1]))
  
    # Throws error since there are only 3 elements in array
    print ("Fourth element = %d" %(a[3]))
  
except:
    print ("An error occurred")

Q3.	Try and except statements are used to catch and handle exceptions in Python. Statements that can raise exceptions are kept inside the try clause and the statements that handle the exception are written inside except clause.

Q4.
I. TRY AND ELSE:
	def fun(a):
    if a < 4:
        b = a/(a-3)
        print("Value of b = ", b)
    else:
        pass
      
try:
    fun(5)
except ZeroDivisionError:
    print("ZeroDivisionError Occurred and Handled")
else:
    print("executed else block successfully")
II. FINALLY
def fun(a):
    if a < 4:
        b = a/(a-3)
        print("Value of b = ", b)
    else:
        pass
      
try:
    fun(5)
except ZeroDivisionError:
    print("ZeroDivisionError Occurred and Handled")
else:
    print("executed else block successfully")
finally:
    print("executed finally block")
III. RAISE
x = -1

if x < 0:
  raise Exception("Sorry, no numbers below zero")

Q5. In Python, we can define custom exceptions by creating a new class that is derived from the built-in Exception class.
	When we are developing a large Python program, it is a good practice to place all the user-defined exceptions that our program raises in a separate file.
	Many standard modules define their exceptions separately as exceptions.py or errors.py (generally but not always).
class InvalidAgeException(Exception):
    "Raised when the input value is less than 18"
    pass

# you need to guess this number
number = 18

try:
    input_num = int(input("Enter a number: "))
    if input_num < number:
        raise InvalidAgeException
    else:
        print("Eligible to Vote")
        
except InvalidAgeException:
    print("Exception occurred: Invalid Age")


Q6.
class InvalidAgeException(Exception):
    "Raised when the input value is less than 18"
    pass

# you need to guess this number
number = 18

try:
    input_num = int(input("Enter a number: "))
    if input_num < number:
        raise InvalidAgeException
    else:
        print("Eligible to Vote")
        
except InvalidAgeException:
    print("Exception occurred: Invalid Age")